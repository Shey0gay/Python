'''
#WYJĄTKI:
#Prawa Murpyego
#The program failed successfully
#Błędy w danych i programach
#------------------------------
#1:
value = int(input('Wprowadź liczbę: '))
print('Odwrotność', value, 'to', 1/value)
#------------------------------
#2:
liczba1 = int(input("Wprowadź pierwszą liczbę: "))
liczba2 = int(input("Wprowadź drugą liczbę: "))
if liczba2 != 0: 
    print(liczba1 / liczba2)
else:
    print("Ta operacja nie może być wykonana.")
print("KONIEC.")
#------------------------------
Za każdym razem, gdy twój kod próbuje zrobić coś 
złego/głupiego/nieodpowiedzialnego/szalonego/niewykonalnego, język Python robi dwie rzeczy:
    • zatrzymuje twój program; 
    • tworzy specjalny rodzaj danych, zwany wyjątkiem. 
Obie te czynności są nazywane zgłaszaniem wyjątku. 
Możemy powiedzieć, że język Python zawsze zgłasza wyjątek (lub że wyjątek został zgłoszony), 
gdy nie ma pojęcia, co zrobić z twoim kodem.
Co dzieje się dalej?
    • zgłoszony wyjątek czeka, aż ktoś go zauważy i zajmie się nim; 
    • jeśli nikt się nie zajmie zgłoszonym wyjątkiem, program zostanie przymusowo zakończony 
      i zobaczysz komunikat o błędzie wysłany do konsoli przez język Python; 
    • jeśli jednak ktoś zajmie się wyjątkiem i odpowiednio go obsłuży, zawieszony program zostanie 
      wznowiony, a jego wykonywanie będzie kontynuowane. 
Język Python dostarcza efektywnych narzędzi, które pozwalają obserwować wyjątki, identyfikować i obsługiwać je sprawnie. 
Jest to możliwe dzięki temu, że wszystkie potencjalne wyjątki mają swoje jednoznaczne nazwy, 
więc możesz je kategoryzować i odpowiednio reagować.

#------------------------------
Brak obsługi:

value = 1
value /= 0
#------------------------------
#Blok try catch:
try:
    # Tu umieszczmy kod do wykonania
    # może być bylejaki 
except:
    # Tu umieszczmy żal za grzechy
    # jeśli coś poszło nie tak

• słowo kluczowetry rozpoczyna blok kodu, który może działać poprawnie lub niepoprawnie; 
• następnie język Python próbuje wykonać ryzykowne działanie; jeśli się nie powiedzie, 
  zostanie zgłoszony wyjątek i język Python zacznie szukać rozwiązania; 
• słowo kluczowe except uruchamia fragment kodu, który zostanie wykonany, jeśli coś 
  w bloku try pójdzie nie tak - jeśli wewnątrz poprzedniego bloku try zostanie zgłoszony wyjątek, 
  tutaj wystąpi błąd, zatem kod znajdujący się za słowem kluczowym except powinien zapewnić odpowiednią reakcję na zgłoszony wyjątek; 
• powrót do poprzedniego poziomu zagnieżdżania kończy sekcję try-except. 

#------------------------------
#1a:

try:
    value = int(input('Wprowadź liczbę: '))
    print('Odwrotność ', value, 'to', 1/value)        
except:
    print('Sam sobie oblicz, jak jesteś taki mądry')

#------------------------------
#2a:

liczba1 = int(input("Wprowadź pierwszą liczbę: "))
liczba2 = int(input("Wprowadź drugą liczbę: "))
try:
    print(liczba1 / liczba2)
except: 
    print("Ta operacja nie może być wykonana.")

print("KONIEC.")

#---------------------------------------------------------------

#Dwa wyjątki:

• gałęzie except są przeszukiwane w tej samej kolejności, w jakiej pojawiają się w kodzie; 
• nie wolno używać więcej niż jednej gałęzi except o danej nazwie wyjątku; 
• liczba różnych gałęzi except jest dowolna - jedynym warunkiem jest to, że jeśli używasz try, 
  musisz umieścić po nim co najmniej jeden except (nazwany lub nie); 
• słowo kluczowe except nie może zostać użyte bez poprzedzającego try; 
• jeśli zostanie wykonana którakolwiek z gałęzi except, inne gałęzie nie zostaną przejrzane; 
• jeśli żadna z określonych gałęzi except nie pasuje do zgłoszonego wyjątku, wyjątek ten pozostanie nieobsłużony
• jeśli istnieje gałąź except bez nazwy (bez nazwy wyjątku), to musi ona być określona jako ostatnia. 

• ZeroDivisionError to specjalny przypadek bardziej ogólnej klasy wyjątku zwanej ArithmeticError; 
• ArithmeticError to specjalny przypadek bardziej ogólnej klasy wyjątku zwanej Exception; 
• Exception to specjalny przypadek bardziej ogólnej klasy wyjątku zwanej BaseException; 

Możemy to opisać w następujący sposób (kierunek strzałek wskazuje na bardziej ogólny element):

BaseException 
	↑ 
Exception 
	↑ 
ArithmeticError 
	↑ 
ZeroDivisionError

#-----ŹLE !!!-------
try: 
    y = 1 / 0 
except ArithmeticError: 
    print("Problem arytmetyczny!") 
except ZeroDivisionError: 
    print("Dzielenie przez Zero!") 
print("KONIEC.") 


Zmiana jest radykalna - wynik kodu to teraz:
Problem arytmetyczny! KONIEC. 

Dlaczego tak się stało, jeśli zgłoszony wyjątek jest taki sam, jak poprzednio?
Wyjątek jest taki sam, ale bardziej ogólny wyjątek jest teraz wymieniony jako pierwszy - 
  będzie on również przechwytywał wszystkie przypadki dzielenia przez zero. 
Czyli nie ma szans, żeby jakikolwiek wyjątek wpadł w gałąź ZeroDivisionError. 
Ta gałąź jest teraz całkowicie nieosiągalna.

# Dobrze:
    • kolejność gałęzi ma znaczenie! 
    • nie umieszczaj bardziej ogólnych wyjątków przed bardziej konkretnymi; 
    • taki ruch sprawi, że ta druga gałąź będzie niedostępna i bezużyteczna; 
    • co więcej, spowoduje to, że twój kod będzie nieuporządkowany i niespójny; 
    • Język Python nie wygeneruje żadnych komunikatów o błędach dotyczących tego problemu. 

try:
    y = 1 / 0
except ZeroDivisionError:
    print("Dzielenie przez Zero!")
except ArithmeticError: 
    print("Inny problem arytmetyczny!") 

print("KONIEC.")

#------------------------------------------
# Drzewko wyjątków:
def wyswietl_drzewko(klasa, zagniezdzenie = 0):
    if zagniezdzenie > 1:
        print("   |" * (zagniezdzenie - 1), end="")
    if zagniezdzenie > 0:
        print("   +---", end="")
    print(klasa.__name__)
    for podklasa in klasa.__subclasses__():
        wyswietl_drzewko(podklasa, zagniezdzenie +1)
wyswietl_drzewko(BaseException)

#------------------------------------------
(znależć i usunąć błąd)

cyfry = (('###', '  #', '###', '###', '# #', '###', '###', '###', '###', '###'),
         ('# #', '  #', '  #', '  #', '# #', '#  ', '#  ', '  #', '# #', '# #'),
         ('# #', '  #', '###', '###', '###', '###', '###', '  #', '###', '###'),
         ('# #', '  #', '#  ', '  #', '  #', '  #', '# #', '  #', '# #', '  #'),
         ('###', '  #', '###', '###', '  #', '###', '###', '  #', '###', '###'))

	

def printNumer(num):
    """ Funkcja przyjmuje jako argument liczbę całkowitą lub ciąg znaków,
    dający przetworzyć się na liczbę całkowitą.
    Następnie drukuje na eranie wczytaną wartość w formie cyfr wyswietlacza 7-segmentowego
    """
    for line in range(5):                            # mamy 5 linii w naszym wyswietlaczu
        for digit in str(num): 
            print(cyfry[line][int(digit)], end=' ')  # drukuje fragment cyfry
        print()  

def getNumber():
    """ Funkcja pobiera od użytkownika ciąg znaków
    do czasu wczytania ciągu składającego się z samych cyfr,
    lub przerwania poprzez KeyboardInterrupt.
    """
    try:
        numer = input("Podaj liczbę, którą chcesz wyświetlić: ")
        assert numer.isdigit()
        return numer
    except AssertionError:
        print("ERROR! - Podana wartość nie jest liczbą.")
        getNumber()
    except:
        print("ERROR! - Nieznany błąd.")
        getNumber()

liczba = getNumber()
printNumer(liczba)

#----------------------------------------
# Program liczący sumę liczb

sekwencja = input("Podaj sekwencję liczb - oddziel je spacjami: ")
strings = sekwencja.split()
total = 0
try:
    for substr in strings:
        total += float(substr)
    print("Suma wynosi:", total)
except:
    print(substr, "to nie jest liczba.")

#--------------------------------------
#Wyjątek w funkcji:
Jeśli wyjątek zostanie zgłoszony wewnątrz funkcji, może zostać obsłużony:
    • wewnątrz funkcji; 
    • poza funkcją; 

def zlaFun(n): 
    return 1 / n 
try: 
    zlaFun(0) 
except ArithmeticError: 
    print("Co sie stalo? Zgloszono wyjatek!") 
print("KONIEC.") 

#------------------
#lub:
def zlaFun(n):
    try:
        return 1 / n
    except ArithmeticError:
        print("Problem Arytmetyczny!")
    return None

zlaFun(0)
print("KONIEC.") 

#-------------------------------

raise exc 
Uwaga: raise jest słowem kluczowym.
Instrukcja ta umożliwia:
    • symulację zgłaszania rzeczywistych wyjątków (np. w celu przetestowania strategii ich obsługi) 
    • częściowo obsługę wyjątku i przełożenie odpowiedzialności za ukończenie obsługi na inną część kodu (separacja zagadnień). 

W ten sposób można przetestować swoją procedurę obsługi wyjątków bez zmuszania kodu do robienia głupich rzeczy.

def zlaFun(n):
    raise ZeroDivisionError
try:
    zlaFun(0)
except ArithmeticError:
    print("Co sie stalo? Blad?")
print("KONIEC.")
#-------------------

raise 
Jest jedno poważne ograniczenie: ten rodzaj instrukcji raise może być użyty wyłącznie wewnątrz gałęzi except; 
  używanie go w jakimkolwiek innym kontekście powoduje błąd.
Instrukcja natychmiast ponownie zgłosi ten sam wyjątek, który jest aktualnie obsługiwany.

Dzięki temu możesz podzielić obsługę wyjątków pomiędzy różne części kodu.

ZeroDivisionError jest zgłoszony dwukrotnie:
    • po raz pierwszy, w części kodu try (jest to spowodowane rzeczywistym dzieleniem przez zero) 
    • po raz drugi, w części except przez instrukcję raise. 
W efekcie kod wyświetla:
Zrobilem to ponownie! Rozumiem! KONIEC. 

def zlaFun(n):
    try:
        return n / 0
    except: 
        print("Zrobiłem dzielenie przez 0!")
        raise
try:
    zlaFun(0)
except ArithmeticError: 
    print("Ponowne wywołanie")

print("KONIEC.")

#=========================================
20241128:
'''
